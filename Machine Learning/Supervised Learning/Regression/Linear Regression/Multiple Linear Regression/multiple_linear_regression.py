# -*- coding: utf-8 -*-
"""Multiple Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JGhK375g4sQG7aLfd3aN_M3zuaPlIBP0

# Multiple Linear Regression

## Importing the necessary Libraries and Packages
"""

from sklearn.model_selection import train_test_split # splitting the dataset
from sklearn.linear_model import LinearRegression # regression algorithm
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_squared_error # accuracy metric
import numpy as np # data processing
import pandas as pd # data processing 
import matplotlib.pyplot as plt # data plotting

"""## Importing the csv file as a DataFrame"""

df = pd.read_csv("Startups.csv")
df.head()

"""## Now taking 2 parts from the dataset:
### X : which contains all the data except the <b>Profit</b> column<br>y : which contains only the <b>Profit</b> column 
"""

X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

"""## Visualisation of the Data"""

plt.figure(figsize=(8, 6), dpi=150)
Research = df["Research"]
Profit = df["Profit"]
plt.scatter(Research, Profit)
plt.xticks(np.arange(20000, 200000, 20000))
plt.yticks(np.arange(60000,220000,20000))
plt.title("Research vs Profit")
plt.xlabel("Research")
plt.ylabel("Profit")

plt.figure(figsize=(8, 6), dpi=150)
Marketing = df["Marketing"]
Profit = df["Profit"]
plt.scatter(Marketing, Profit)
plt.xticks(np.arange(25000, 475000, 50000))
plt.yticks(np.arange(60000,220000,20000))
plt.title("Marketing vs Profit")
plt.xlabel("Marketing")
plt.ylabel("Profit")

"""## Split the X and y dataframes for test and training"""

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=1/3,random_state=0)

"""## Implementation of the Model"""

reg=LinearRegression()
reg.fit(X_train,y_train)
y_pred = reg.predict(X_test)

"""## Performance of the Model"""

# Printing the coefficient of determination of the regression
print("The coefficient of determination :", r2_score(y_test,y_pred))

"""## Additional Performance Metrics"""

print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_pred)))